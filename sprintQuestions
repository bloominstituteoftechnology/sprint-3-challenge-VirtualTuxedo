      👉 CHALLENGE 1 - Integers
      
       🧠 Constructor takes **any** number of arguments, which are integers
       🧠 Instances have an `ints` property which is an array holding the integers above in the same order
       🧠 Implement a `getAll` method which returns the data held in the `ints` property
       🧠 Implement a `getNegatives` method which returns an array with the integers that negative
       🧠 Implement a `getAllSquared` method which returns an array with the integers squared
       🧠 Implement a `pop` method which removes the last integer from `ints`  and returns it
       🧠 Implement a `push` method which takes an int and pushes it to the end of `ints`, and returns the updated `ints` property
       🧠 Implement a `getEveryNth` method which takes an int `n` and returns an array with the ints at position 0, n, n + n, n + n + n, etc
       🧠 Implement a `getAllReversed` method which returns the ints in reverse order
       ❗ WARNING: except for `getAllReversed`, methods must respect the order of the integers
       ❗ WARNING: note that none of the methods actually mutate the `ints` property

      👉 CHALLENGE 2 NerfGun
      
       🧠 Constructor takes one argument: the total number of projectiles supported by the instance
       🧠 New instances initialize fully loaded and with the safety on
       🧠 Instances have a `shoot` method that takes no arguments:
            * If there is ammo left and safety is off, method consumes one projectile and returns the string "Bang!"
            * Shooting on empty or with the safety on, returns the string "Click!"
       🧠 Instances have a `reload` method that takes a number and tops up the instance by that number
            * Reloading returns a string in the following format: "<number> projectiles left!"
            * Reloading by more than capacity fills the instance to capacity
            * Passing an argument which is not a number larger than zero returns the string "Error reloading!"
       🧠 Instances have a `toggleSafety` method that takes no arguments and switches the state of the safety
            * When engaging the safety, return "Safety enabled!"
            * When disengaging the safety, return "Safety disabled!"
       🌟 HINT: instances need to keep track of their maximum capacity as well as their current capacity

      👉 CHALLENGE 3 EBook

       🧠 Constructor takes two arguments:
            * First arg is a string with the whole text of the book
            * Second arg is the number of characters contained in a single page of the book
       🧠 Instances have a `next` method:
            * It takes no args and returns the next page of the book
            * If the next page is empty because we have reached the end, return null instead
       🧠 Example of usage:
          const ebook = new EBook('abcdefg', 3)
          ebook.next() // returns "abc"
          ebook.next() // returns "def"
          ebook.next() // returns "g"
          ebook.next() // returns null
       🌟 HINT: remember about the `slice` method which strings and arrays have
       ❗ Feel free to implement `back`, although this is not required nor graded

      👉 CHALLENGE 4 AntFarm

       🧠 Constructor takes **any** number of arguments, which are strings: the names of your ants
       🧠 Instances of AntFarm have an `ants` property holding an array of ants:
            * Each ant is an object with a `name` prop and a `health` prop that starts at 100
       🧠 Instances of AntFarm have a `work` method:
            * When invoked your ants do chores at a cost of 20 health points each
            * The method takes no arguments and returns the string "<ant number> ants starting work!"
            * If the `health` of any ant decreases to zero or below, it dies and is removed from `ants`
            * If `ants` contains no ants, the method returns "No ants here. Did you work them to death?"
       🧠 Instances of AntFarm have a `feed` method:
            * The method takes as its only argument the name of the particular ant(s) to feed
            * When invoked, the ant(s) by the given name obtain a health increase of 15 points
            * The method returns the string "Yum!" if any ants by the given name exist
            * The method returns the string "<ant name> not found!" if no ants by the given name exist
       🌟 Example:
            const farm = new AntFarm('Jess', 'Blake');
            farm.ants;         // evaluates to [{name: 'Jess', health: 100}, {name: 'Blake', health: 100}]
            farm.work();       // returns "2 ants starting work!"
            farm.ants;         // evaluates to [{name: 'Jess', health: 80}, {name: 'Blake', health: 80}]
            farm.feed('Jess'); // returns "Yum!"
            farm.ants;         // evaluates to [{name: 'Jess', health: 95}, {name: 'Blake', health: 80}]
       👉 HINT: when replacing a list with a modified list of the same length you can use map:
            let list = ['a','b','c']
            list = list.map(item => (item === "a" ? item + item : item))
            console.log(list) // prints ["aa","b","c"]
       👉 HINT: when replacing a list with a filtered list you can use filter:
            let list = ['a','b','c']
            list = list.filter(item => item === "a")
            console.log(list) // prints ["a"]
       👉 HINT: if you are not feeling confident with map and filter, solve the problem with for loops,
            and with the piece of mind of all tests passing, refactor to use map/filter

